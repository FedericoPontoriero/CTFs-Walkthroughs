#+title: Basic File Exploit

#+BEGIN_QUOTE
The program provided allows you to write to a file and read what you wrote from it.
Try playing around with it and see if you can break it!
Connect to the program with netcat:
#+BEGIN_SRC sh
nc saturn.picoctf.net 64271
#+END_SRC
#+END_QUOTE
The number of the port changes, this is just the one I received

#+attr_html: :width 500px

** First steps
[[https://netcat.sourceforge.net/][Netcat]] is a command line networking utility that allows us to connect to servers
that have open ports via TCP & UDP connections. There is also a newer implementation
called [[https://nmap.org/ncat/][ncat]] that allows redirection, SSL support among other things.

We can download the source code clicking in the link or using:
#+BEGIN_SRC sh
wget https://artifacts.picoctf.net/c/189/program-redacted.c
#+END_SRC

And we can open the file with any text editor.

We can see that is a c program with a lot of packages imported and a constant called
"flag" that has the value "[REDACTED]". This is our target.

There is no need to understand every line of the code but we can notice a few things.

We have a multidimensional array called "data"
(10 entries of 100 length) and a "inputs" variable that keeps tracks of our inputs.

There is a function that listens for an input and tries to read it. And another one
that prompts the user. Inside an infinite loop it asks for the length of the data and makes some checks.

** Playing with the program
If we now input the command in the terminal there will be a few prompts given to us.
Now we type 1 and enter some data like "hello", then it will asks us for the length of our data and we say 5.
Now we can view our data with 2 and giving it an entry number.

Of course, we can lie to the program about the length of our data, we could say that
"hello" has 100 characters. But the most important part of the program is:
#+BEGIN_SRC c
if ((entry_number = strtol(entry, NULL, 10)) == 0) {
  puts(flag);
  fseek(stdin, 0, SEEK_END);
  exit(0);
}
#+END_SRC

If we look to the man page of the strtol function it will tell us that it's used
to convert a string to a long integer and we can also know that this function returns
the result of the conversion, unless the value would underflow or overflow.
In that case it will throw an error. It says "errno is set to ERANGE" and in the errors section of the man page: "The implementation may also set errno to EINVAL in case no conversion was performed (no digits seen, and 0 returned)"

All of this to say that if we input 0 or some string to the prompt that asks us for
the entry number this will make the if statement true and it will give us the flag.

This was a fairly quick and easy exercise but it allowed us to investigate some C
code and it showed us the importance of input validation.
